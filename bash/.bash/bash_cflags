#!/bin/sh
#
# Jeffrey Carpenter <jeffrey.carp@gmail.com>
#
#   Local development config for hobbyist software development & general system
# administration
#

export LOCAL="virgo" # Reserved bash var for future use...

# convenience bash shell vars for common user paths
export DESKTOP="$HOME/Desktop"
export DOCUMENTS="$HOME/Documents"
export DOWNLOADS="$HOME/Downloads"
export MOVIES="$HOME/Movies"
export MUSIC="$HOME/Music"
export PICTURES="$HOME/Pictures"
export PROJECTS="$HOME/Projects"
export TMP="$HOME/tmp"
export TORRENTS="$HOME/Downloads/torrents"

export NOM="$PROJECTS/nomlib.git"
export TT="$PROJECTS/ttcards.git"
export CFG="$PROJECTS/dotfiles"
export HCFG="$PROJECTS/homebrew"
NOMDEV="${PROJECTS}/nomdev.git"

case "$(uname -s)" in
  Darwin)

    case "$(hostname)" in
      virgo.local) # MacBook Air Mid 2011 [Intel Core i5 1.6Ghz]

      # CC & CXX should not need to be set
      #export CC="/usr/bin/clang"
      # export CXX="/usr/bin/clang++"

      # Number of CPU threads to spawn for clang, GCC && CTest
      export NUM_THREADS=2
      export MAKEFLAGS="-j${NUM_THREADS}"
      export CTEST_PARALLEL_LEVEL=$((NUM_THREADS+2))

      # It is a personal preference to use /usr/bin/xcode-select to set the
      # default DEVELOPER_DIR path, instead of setting it from the shell
      # environment; i.e.: eases the use of concurrent build environments.
      #
      # See also: man 1 xcode-select
      #export DEVELOPER_DIR="/Applications/Xcode.app/Contents/Developer"

      #export CCACHE_PATH="/usr/local/opt/ccache/libexec"
      #CCACHE_DIR="/ramdisk/dir"; export CCACHE_DIR

      # Note that $CCACHE_PATH be included early on, so that it does not get
      # overridden by the standard search paths, i.e.: /usr/local/bin, /usr/bin,
      # etc.
      #export PATH="$CCACHE_PATH:$PATH"

      # node.js
      export NODE_PATH="/usr/local/lib/node_modules"

      # emscripten
      #EMMAKEN_COMPILER="/usr/local/bin/clang++"; export EMMAKEN_COMPILER

      # Source: http://crossgcc.rts-software.org/doku.php?id=start
      export PATH="$PATH:/usr/local/gcc-4.8.0-qt-4.8.4-for-mingw32/win32-gcc/bin"
      export PATH="$NOMDEV:$PATH"
      export PATH=$PATH:$HOME/local/opt/bin

      # Additional pkg-config paths
      export PKG_CONFIG_PATH="/opt/X11/lib/pkgconfig:/usr/local/lib/pkgconfig:/usr/local/share/pkgconfig:/usr/lib/pkgconfig:/usr/local/Cellar/curl/7.42.1/lib/pkgconfig:/usr/local/Library/ENV/pkgconfig/10.10"

      # qt52-dev
      export PKG_CONFIG_PATH="/usr/local/opt/qt52/lib/pkgconfig:${PKG_CONFIG_PATH}"

      export PYTHONPATH=$(brew --prefix)/lib/python2.7/site-packages:$PYTHONPATH

      #export GL_ENABLE_DEBUG_ATTACH=YES

    ;; # end case virgo.local
    esac # end switch hostname
    # [generic OS X cfg]
  ;; # end case Darwin
  Linux)
    case "$(hostname)" in
      libra.local)

      # Number of CPU threads to spawn for clang, GCC && CTest
      export NUM_THREADS=1
      export MAKEFLAGS="-j${NUM_THREADS}"
      export CTEST_PARALLEL_LEVEL=${NUM_THREADS}
    ;; # end case libra.local
    esac # end switch hostname
    # [generic Linux cfg]
  ;; # end case Linux
  *)
  ;;
esac

#if [ "$(which pkg-config)" ]; then
  #SDL_DEV="$(pkg-config --cflags --libs sdl SDL_image SDL_mixer SDL_ttf)"; export SDL_DEV
#fi

# Apparently, PREFIX bash var conflicts with NPM (node's package manager), so
# the quick solution was to not use this bash var anymore.
#export PREFIX="~/local"

if [ -f "$(which rbenv)" ]; then
  eval "$(rbenv init -)"
  PATH="$HOME/.rbenv/versions/1.9.3-p0/bin:$PATH"; export PATH
fi

#export GEM_HOME="$HOME/.gem/ruby/1.9.3-p0"
#export GEM_PATH="$HOME/.gem/ruby/1.9.3-p0"
#export GEM_PATH="/usr/lib/ruby/gems/1.9.3"
#export RUBYOPT="-W2 -v"
#RUBYLIB="/Library/Ruby"; export RUBYLIB
#export RUBYLIB="/home/jeff/Projects/ruby/lib"

# Show GTest diagnostics output
export CTEST_OUTPUT_ON_FAILURE=true

# Colored logging output from nomlib
export NOM_COLOR=always
alias nomdev='nomdev.rb $@'

