#!/bin/sh
#
# 2012-01/16:jeff
#
# 		~/.bash_prompt
#
#   Local bash(1) shell prompt
#
# See also,
#
#	bash(8)
#
# 	Special thanks goes to the author of the script located at the following
# URL https://raw.github.com/gf3/dotfiles/master/.bash_prompt for the idea
# behind display of the current git-branch.
#
#			REFERENCES / IDEAS
#
#	1.	Make sure that your color variables are enclosed in double and not
#		single quote marks. Using single quote marks seems to give Bash
#		problems with line wrapping correctly.
#	2. 	https://wiki.archlinux.org/index.php/Color_Bash_Prompt
#	3.	http://maketecheasier.com/8-useful-and-interesting-bash-prompts/2009/09/04
#	4.	http://www.cyberciti.biz/tips/howto-linux-unix-bash-shell-setup-prompt.html
#	5.	http://www.hypexr.org/bash_tutorial.php#cdargs
#

# set variable identifying the chroot you work in (used in the prompt below)
#if [ -z "$debian_chroot" ] && [ -r /etc/debian_chroot ]; then
#    debian_chroot=$(cat /etc/debian_chroot)
#fi

# set a fancy prompt (non-color, unless we know we "want" color)
#case "$TERM" in
#xterm-color)
#    PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
#    ;;
#*)
#    PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
#    ;;
#esac
# Comment in the above and uncomment this below for a color prompt
#PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '

# Declare & initialize color palette

RS="\[\e[0m"       	# Text Reset
BLACK="\e[0;00m" 	# blank space
RED="\e[0;31m" 		# @
GREEN="\e[0;32m" 	# timestamp
ORANGE="\e[0;33m" 	# hostname
CYAN="\e[0;34m" 	# username || :
GREY="\e[0;36m" 	# $CWD || ~

#BLANK="\[$BLACK\]"
USERNAME="\[$CYAN\]\u\[$RS\]"
HOST="\[$ORANGE\]\h\[$CYAN\]"
AT="\[$GREEN\]@"
WORKING_DIRECTORY=":\w\[$GREY\]"
PROMPT="\[$ORANGE\] \$ \[$RS\]"
#PROMPT="\[$ORANGE\] \$ "
#TIMESTAMP_CMD="$(date +%H:%M:%S)"
#TIMESTAMP="\[$GREEN\][$TIMESTAMP_CMD] \[$RS\]"
ROOT=`id -u`

# Origins: https://raw.github.com/gf3/dotfiles/master/.bash_prompt
parse_git_dirty () {
  [[ $(git status 2> /dev/null | tail -n1) != "nothing to commit (working directory clean)" ]] && echo "*"
}

parse_git_branch () {
  git branch --no-color 2> /dev/null | sed -e '/^[^*]/d' -e "s/* \(.*\)/\1$(parse_git_dirty)/"
}

get_git_branch () {
    GIT_EXEC="$(git branch 2> /dev/null)"
}

if [ "$(which git)" ]; then
	if [[ -n get_git_branch ]]; then
		GIT_BRANCH_DIRECTORY="\[$ORANGE\]:\$(parse_git_branch)"
	else
		# fuck if I know or care at the moment :>O (leaving silly msg for debugging worries later)
		GIT_BRANCH_DIRECTORY=" \[$ORANGE\][git-branch: POSSIBLE BUG] "
	fi
else
	GIT_BRANCH_DIRECTORY=""
fi

if [ "$ROOT" = "0" ]; then
	USERNAME="\[$RED\]\u\[$RS\]"
	PROMPT="\[$RED\] \# \[$RS\]"
	# root@libra:~ #
	PS1="${USERNAME}${AT}${HOST}${WORKING_DIRECTORY}${GIT_BRANCH_DIRECTORY}${PROMPT}"
else
	# jeff@libra:~ $
	PS1="${USERNAME}${AT}${HOST}${WORKING_DIRECTORY}${GIT_BRANCH_DIRECTORY}${PROMPT}"
fi

PS2="> "
PS3="> "
PS4="+ "

export PS1 PS2 PS3 PS4

if test "$TERM" = "xterm" -o \
		"$TERM" = "xterm-color" -o \
		"$TERM" = "xterm-256color" -o \
		"$TERM" = "rxvt" -o \
		"$TERM" = "rxvt-unicode" -o \
		"$TERM" = "xterm-xfree86" -o \
		"$TERM" = "screen-256color"; then
	PROMPT_COMMAND='echo -ne "\033]0;${USER}@${HOSTNAME%%.*}:${PWD/$HOME/~}\007"'
	history -a
	export PROMPT_COMMAND
fi
