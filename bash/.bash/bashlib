#!/bin/sh
#
# 2011-07-20:jeff
#
# 		~/.bashlib
#
#   Local bash (1) functions executed for non-login interactive shells.
#


if [ "$(which less)" ]; then
  # Source: https://wiki.archlinux.org/index.php/Man_Page#Colored_man_pages
  man()
  {
    env \
    LESS_TERMCAP_mb=$(printf "\e[1;31m") \
    LESS_TERMCAP_md=$(printf "\e[1;31m") \
    LESS_TERMCAP_me=$(printf "\e[0m") \
    LESS_TERMCAP_se=$(printf "\e[0m") \
    LESS_TERMCAP_so=$(printf "\e[1;44;33m") \
    LESS_TERMCAP_ue=$(printf "\e[0m") \
    LESS_TERMCAP_us=$(printf "\e[1;32m") \
    man "$@"
  }
fi

case "$(uname -s)" in
  Darwin)
    # Derives from Fielding's dotfiles repo
    # https://github.com/justfielding/dotfiles
    timecap ()
    {
      pwd_bin="$(which pwd)"
      parent="$(pwd_bin)"
      filenumber=${1:-1}
      delay=${2:-5}
      scdir=${3:-$(parent)}
      date_bin=$(which date)
      screencap_bin="$(which screencapture)"
      i=$filenumber

      while [ 1 ]
        do $screencap_bin -t jpg -x ${scdir}${i}_${timestamp}.jpg
        timestamp="$($date_bin +%y-%m-%d_%s)"
        echo "Capturing to ${i}_${timestamp}.jpg"
        let i++
        sleep $delay
      done
    }

  function tagwhere()
  {
    if [[ -z "$1" ]]; then
      echo "Usage: tagwhere <url> <file_path>"
    else
      xattr -w 'com.apple.metadata:kMDItemWhereFroms' $1 $2
    fi
  }
  ;;
  Linux)
    function apkg()
    {
      if [[ -z "$1" ]]; then
        echo "Usage: apkg <pkg> ... where <pkg> is the AUR package name"
      else
        command wget http://aur.archlinux.org/packages/$1/$1.tar.gz
      fi
    }

    if [ -x "$(which geany)" ]; then
      function geany()
      {
        command geany "$@" &
      }
    fi

    if [ -x "$(which scite)" ]; then
      function scite()
      {
        if [[ "$#" -ge 1 ]]; then # test expression: >=
          command scite "$@" &
        else
          echo -e "Usage: scite.alias <file(s)>"
        fi
      }
    fi

    if [ -x "$(which firefox)" ]; then
      function firefox() {
          command firefox "$@" &
      }
    fi

    if [ -x "$(which meld)" ]; then
      function meld() {
          command meld "$@" &
      }
    fi

    if [ -x "$(which bless)" ]; then
      function bless() {
          command bless "$@" &
      }
    fi

    if [ -x "$(which gtkman)" ]; then
      function gtkman() {
          command gtkman "$1" &
      }
    fi

    if [ -x "$(which epdfview)" ]; then
      function pdf() {
          command epdfview "$1" &
      }
    fi

    if [ -x "$(which ggv)" ]; then
      function ggv() {
          command ggv "$1" &
      }
    fi

    if [ -x "$(which pkgbrowser)" ]; then
      function pkgbrowser() {
          command pkgbrowser "$1" &
      }
    fi

    if [ -x "$(which luakit)" ]; then
      function luakit() {
          command luakit "$@" &
      }
    fi

    if [ -x "$(which thunar)" ]; then
      function thunar()
      {
        if [ -n "$1" ]; then
          command thunar "$@" &
        else
          command thunar . &
        fi
      }
    fi

    if [ -x "$(which gitg)" ]; then
      function gitg()
      {
        if [ -n "$1" ]; then
          command gitg "$@" &
        else
          command gitg . &
        fi
      }
    fi

    if [ -x "$(which alsamixer)" ]; then
      function alsamixer()
      {
        if [ -n "$1" ]; then
          command alsamixer "$@"
        else
          command alsamixer -c0
        fi
      }
    fi
    ;;
    *)
    ;;
  esac

if [ -x "$(which ssh)" ]; then
  function ssh()
  {
    if [[ "$1" = "-X" && -n "$2" ]]; then
      echo -ne "TRANSLATING /usr/bin/ssh argument one [-X] to [-Y], appended $2"
      command ssh "-Y" "$2"
    else
      command ssh "$@"
    fi
  }
fi

function sha1calc()
{
  if [[ -x "$(which sha1sum)" && -x "$(which openssl)" ]]; then
    if [[ $@ ]]; then
      openssl="$(which openssl)" # bin path
      eval echo -n \""$@\"" | $openssl sha1
    else
      echo "Err: sha1calc requires textual input arguments."
    fi
  fi
}

function md5calc()
{
  if [[ -x "$(which md5)" && -x "$(which openssl)" ]]; then
    if [[ $@ ]]; then
      openssl="$(which openssl)" # bin path
      eval echo -n \""$@\"" | $openssl md5
    else
      echo "Err: md5calc requires textual input arguments."
    fi
  fi
}

function osver()
{
  if [[ -x "$(which otool)" && -x "$(which grep)" ]]; then
    if [[ "$1" ]]; then
      otool_bin="$(which otool)" # bin path
      grep_bin="$(which grep)" # bin path

      # Should include the output of both version & sdk
      $otool_bin -l "$1" | $grep_bin -B 1 sdk
    else
      echo "Error: osver alias requires an input argument: specify a binary file to process."
    fi
  fi
}

if [[ -x "$(which grep)" ]]; then
  function fstring()
  {
    if [[ ! "$2" ]]; then
      grep $1 -s -I -i -R --exclude-dir \*.git .
    else
      grep $1 -s -I -i -R --exclude-dir \*.git $@
    fi
  }
fi

# Homebrew package management helpers

if [[ -x "$(which brew)" ]]; then
  BREW_BIN=$(which brew)

  function brewupgrade()
  {
    brew doctor; brew update; brew upgrade --all; brew missing
  }

  # brew tap telemachus/homebrew-desc && brew install brew-desc
  # https://github.com/telemachus/homebrew-desc
  if [[ -x "/usr/local/bin/brew-desc.rb" ]]; then
    function binfo()
    {
      # $BREW_BIN info $1; $BREW_BIN desc $1
      $BREW_BIN desc $1; $BREW_BIN info $1
    }
  else # Use standard brew info
    function binfo()
    {
      $BREW_BIN info $1
    }
  fi # end if brew-desc

fi # end if brew

function fullpath()
{
  PARENT_WORKING_DIR=$(pwd)
  FILE_ARG=${1}
  echo ${PARENT_WORKING_DIR}/${FILE_ARG}
}

function fullpathcopy()
{
  PBCOPY_BIN=$(which pbcopy)
  fullpath $1 | ${PBCOPY_BIN}
}

alias fullp='fullpath'
alias fullpcopy='fullpathcopy'
