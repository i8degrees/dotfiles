#!/usr/bin/env bash
# 0-mount-boot-flags.sh:jeff
#
# Kernel helper script to mount the boot partition(s) as read-write. I
# strongly dislike exposing such critical partitions to the OS without first
# marking them as read-only upon boot within my fstab.
#
# See also,
#   kernel-install(8), errno(3), findmnt(8)
#
# TODO(jeff): Support instances where a boot ESP partition does not exist --
# this probably means that we are booted in legacy BIOS mode! -_-
#
# TODO(jeff): Figure out the best way of running a post-install script that
# handles remounting these partitions as read-only.

# Execute a program.
#
# run_cmd(program, ...args)
function run_cmd() {
  if [[ -n "$NOM_DRY_RUN" ]]; then
    printf "DEBUG: %s\n" "$*" >&2
  fi

  "$@"
}

# Log a critical message to stdout and stderr.
#
# log_crit(msg_str, ...args)
function log_crit() {
  printf "CRITICAL: %s\n" "$*" >&2
}

# find_boot(target)
function find_boot() {
  if [[ ! (-x "$(command -v findmnt)") ]]; then
    log_crit "No such file or directory; missing findmnt."
    exit 2
  fi

  run_cmd findmnt --output source --noheadings --first-only "$1"
}

# Halt the kernel-install pipeline from continuing further.
function halt_install() {
  exit 77
}

# Prepare our bootloader environment for updates; disk is writeprotected, so we must
# first unlock it...
function main() {
  BOOT_SOURCE_DEVICE="$(find_boot /boot)"
  BOOT_EFI_SOURCE_DEVICE="$(find_boot /boot/efi)"_
  BOOT_TARGET="/boot"
  BOOT_EFI_TARGET="/boot/efi"
  BOOT_FLAG="$1" # ro | rw
  [[ "$1" == "" ]] && BOOT_FLAG="rw"

  # mount /boot as read-write
  if [[ "$BOOT_SOURCE_DEVICE" != "" ]]; then
    run_cmd mount -o remount,"$BOOT_FLAG" "$BOOT_SOURCE_DEVICE" \
      "$BOOT_TARGET"
  else
    log_crit "Could not find boot device at $BOOT_TARGET."
    halt_install
  fi

  # mount /boot/efi as read-write
  if [[ "$BOOT_EFI_SOURCE_DEVICE" != "" ]]; then
    run_cmd mount -o remount,"$BOOT_FLAG" "$BOOT_EFI_SOURCE_DEVICE" \
      "$BOOT_EFI_TARGET"
  else
    log_crit "Could not find ESP boot device at $BOOT_EFI_TARGET."
    halt_install
  fi

  exit 0
}

#NOM_DRY_RUN=1
main "$@"
