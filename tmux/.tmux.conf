# 2010:jeffrey.carp@gmail.com
#
#		~/.tmux.conf
#
#		Tmux configuration defaults
#
# 	TODO:
#
#	a) write script to determine if tmux is being used in console or X11,
# 	then based on the resulting decision, respectively, choose either to use
# 	tmux internal buffer for copy & paste, or X11 clipboard buffer.
#
#	b) Use the tmux command display-message as indicators on our binded key
#	actions. Example: bind F5 \; run 'display-message "Reloading local config"' \;
#	...and so forth.
#
# 	Many thanks goes out to whomever that gave me the great ideas for tmux copy/paste:
# 	1. http://unix.stackexchange.com/questions/15715/getting-tmux-to-copy-a-buffer-to-the-clipboard/16405#16405
#

# 1. https://github.com/tmux-plugins/tmux-sensible
# 1. https://gist.githubusercontent.com/mzmonsour/8791835/raw/0a9f8ed7c3bfafba153117ad317284cf4bae4678/tmux-default-bindings.txt

# (OS X) Fix pbcopy/pbpaste for old tmux versions (pre 2.6)
#set -g default-command "reattach-to-user-namespace -l $SHELL"
# Upgrade $TERM
set -g default-terminal "xterm-256color"
# Focus events enabled for terminals that support them
set -g focus-events on
# Super useful when using "grouped sessions" and multi-monitor setup
setw -g aggressive-resize on

# new prefix key; ^X
unbind C-b
set -g prefix C-x
unbind x
bind x send-prefix

unbind n
bind n new-window

unbind &

unbind l
bind l previous-window
bind tab next-window

unbind %
unbind '"'
unbind |
bind | split-window -h
unbind -
bind - split-window -v

# reload tmux config at run-time
bind o
bind o source-file ~/.tmux.conf
#unbind r
#bind r rotate-window

unbind u
bind u run-shell "$HOME/.tmux/plugins/tpm/bin/install_plugins"

unbind :
bind enter command-prompt -p ":" %1
#unbind $
bind C-w command-prompt -p "(rename-window)" "rename-window %1"
unbind ,
bind C-s command-prompt -p "(rename-session)" "rename-session %1"

unbind C-b
bind-key          C-b confirm-before -p "kill-session #S? (y/n)" kill-session

unbind &
bind-key          & confirm-before -p "kill-window #W? (y/n)" kill-window

unbind C-x
bind-key          C-x confirm-before -p "kill-pane #P? (y/n)" kill-pane

# TODO
# ZzzZZ; got lazy =O
#unbind M-w
#bind M-w command-prompt -I "(move-window -s source-window),(move-window -t target-window)" "move-window -s %1 -t %2"

# FIXME: appears to not call this binding? I must enter command mode and
# issue this request directly before I am able to test out a new
# configuration w/o shutting down the tmux server.
#unbind r
#bind r \; run "tmux display-message \"Reloading configuration\" \"; run "tmux source-file /home/jeff/.tmux.conf" \; run "tmux refresh-client" \; run "source ~/.bash_profile"

# copy (default?) buffer to OSX clipboard
#unbind [
#unbind c
#bind [ copy-mode \; run "tmux show-buffer | pbcopy"

# FIXME: this is a *TEMPORARY* solution to a minor problem -- it appears that
# even though I terminate the command immediately after copy-mode execution
# (which, in theory, ought to complete before...) tmux expects both copy-mode
# *AND* show-buffer / xclip pipe to return successful before considering this
# 2-3 layered executions just one mere loop.
unbind c
bind c run "tmux show-buffer | xclip -selection clip -i"

# x11 clipboard (copy) to tmux output (paste)
#unbind ]
#bind v run "tmux set-buffer \"$(pbpaste)\"; tmux paste-buffer"

unbind v
bind v run "tmux set-buffer \"$(xclip -o)\"; tmux paste-buffer"

#bind u capture-pane \; run "tmux paste-buffer | urlview"

unbind k
bind k run "tmux clear-history"

set -g status-bg green
set -g status-fg black
set -g status-left "#[fg=green(echo $COLUMNS)]#S"
set -g status-right "#[fg=green]#H"
#set -g status-right 'Continuum status: #{continuum_status}'

setw -g mode-keys emacs
set -g display-time 4000
set -g visual-activity on
set -g default-shell /bin/bash
# IMPORTANT(JEFF): Prevent tmux from spawning a new login shell
# for every new window instance. This improves the usage of 
# `ssh-agent` when called from your shell env
set -g default-command /bin/bash
#set -g default-command 'reattach-to-user-namespace -l $SHELL'
# 256 colors
set -g destroy-unattached off
set -g detach-on-destroy off
set -g exit-unattached off

#set -w -g window-status-current-bg red
set -w -g automatic-rename on
set -w -g monitor-activity on

#setw -g utf8 on
set -w -g xterm-keys on
#set -w -g mode-mouse on
set -w -g clock-mode-style 24
set -w -g clock-mode-colour red

set -g mouse on
#set -g mouse-select-window on
#set -g mouse-select-pane on
#set -g mouse-resize-pane on

set -g history-limit 65536
set -g base-index 1
set -g set-titles on
set -g set-titles-string "[tmux]#S"

# fix vim escape delay
set -s escape-time 0

# set emacs keys
setw -g mode-keys emacs

# TODO
# set -g set-titles-string ""

# tmux plugins
#
# tmux plugin manager bootstraps these files for us
#
# 1. https://github.com/tmux-plugins/tpm/blob/master/docs/automatic_tpm_installation.md
if "test ! -d ~/.tmux/plugins/tpm" \
  "run 'git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm && ~/.tmux/plugins/tpm/bin/install_plugins'"

set -g @plugin 'tmuxinator/tmuxinator'
set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'tmux-plugins/tmux-continuum'
set -g @plugin 'tmux-plugins/tmux-resurrect'
set -g @plugin 'tmux-plugins/tmux-sensible'
set -g @plugin 'tmux-plugins/tmux-yank'
set -g @plugin 'tmux-plugins/tmux-open'

set -g @continuum-restore 'on'
set -g @open-S 'https://www.google.com/search?q='
set -g @open-editor 'C-x'
set -g @yank-selection 'clipboard'
set -g @yank_selection_mouse 'clipboard'
set -g @yank_action 'copy-pipe' # or 'copy-pipe-and-cancel' for the default

run-shell $HOME/.tmux/plugins/tpm/tpm
run-shell $HOME/.tmux/plugins/tmux-continuum/continuum.tmux
run-shell $HOME/.tmux/plugins/tmux-resurrect/resurrect.tmux
run-shell $HOME/.tmux/plugins/tmux-yank/yank.tmux
run-shell $HOME/.tmux/plugins/tmux-open/open.tmux
run-shell $HOME/.tmux/plugins/tmux-sensible/sensible.tmux

# IMPORTANT(jeff): Unbind the list of key bindings so that it prevents me
# from fat fingering a key and watching all of my work panes disappear! -_-
unbind q
#bind q kill-pane
unbind d
# Detach tagged clients
unbind D
# Detach and HUP selected clients
#unbind x
# detach and HUP tagged clients
unbind X
# suspend selected clients
unbind z
# suspend tagged clients
unbind Z

# ssh env
# FIXME(JEFF): We need to finish setting this up before we make the following
# two lines live
#set -g update-environment "SSH_AUTH_LOCK SSH_ASKPASS WINDOWID SSH_CONNECTION SSH_AUTHORITY"
#setenv -g SSH_AUTH_SOCK $HOME/.ssh/ssh_auth_sock

