# ~/.tmux.conf:jeff
#
#		~/.tmux.conf
#
#		Tmux configuration defaults
#
#
# TODO(JEFF): Use the tmux command display-message as indicators on our binded key
#	actions. Example: bind F5 \; run 'display-message "Reloading local config"' \;
#	...and so forth.

# IMPORTANT(JEFF): This allows xsel and xclip to function under X11; this prevents the Authorization required
# error we receive when we do not set this up here.
#
# https://github.com/tmux/tmux/wiki/Clipboard#common-issues---display
setenv -g DISPLAY ":0"

# IMPORTANT(JEFF): Prevent tmux from spawning a new login shell
# for every new instance; this improves the efficiency / usage of
# `ssh-agent` when called from our shell environment.
set -g default-command /bin/bash

# IMPORTANT(JEFF): We must choose a sane default for terminal capabilities; since we deal with so many
# different platforms, "xterm-256color" is the only failsafe option for us!
set -g default-terminal "xterm-256color"
# IMPORTANT(JEFF): Ensure that our terminals we use have support for clipboard
set -as terminal-features ',screen-256color*:clipboard'
set -as terminal-features ',xterm-256color*:clipboard'

# Focus events enabled for terminals that support them
#
# IMPORTANT(JEFF): This is a required setting for the operation of vim-tmux-plugin
set -g focus-events on

# Super useful when using "grouped sessions" and multi-monitor setup
setw -g aggressive-resize on

# new prefix key; ^X
unbind C-b
set -g prefix C-x

unbind x
bind x send-prefix

# Always create a new window from the current working path inside the active tmux pane
#
# https://github.com/tmux/tmux/wiki/Recipes#create-new-panes-in-the-same-working-directory
unbind n
bind n new-window -c "#{pane_current_path}"

# Create a new pane to copy; opens a new pane with the history of the active pane --
# useful to copy multiple items from the history to the shell prompt.
#
# https://github.com/tmux/tmux/wiki/Recipes#create-a-new-pane-to-copy
unbind C
bind C {
	splitw -f -l30% ''
	set-hook -p pane-mode-changed 'if -F "#{!=:#{pane_mode},copy-mode}" "kill-pane"'
	copy-mode -s'{last}'
}

unbind l
bind l previous-window

bind tab next-window

# Always split a window from the current working path inside the active tmux pane
#
# https://github.com/tmux/tmux/wiki/Recipes#create-new-panes-in-the-same-working-directory
unbind |
bind | split-window -hc "#{pane_current_path}"

unbind -
bind - split-window -vc "#{pane_current_path}"

# ^-F5
unbind F5
bind F5 run 'tmux display-message "Reloading configuration at ~/.tmux.conf"'\; source-file "~/.tmux.conf"

# toggle recording the output of the current pane
#
# TODO(JEFF): We need a notification upon toggle of this feature; one of the topics in the tmux
# wiki shares with us a recipe that should aid in this addition.
bind P pipe-pane -o 'cat >~/.tmux/sessions/#{session_id}_#{window_id}_#{pane_id}.log'

unbind u
bind u run-shell "$HOME/.tmux/plugins/tpm/bin/install_plugins"

bind enter command-prompt -p ":" %1

# ^ CTRL+w
bind C-w command-prompt -p "(rename-window)" "rename-window %1"

#unbind r
#bind r command-prompt -p "(rename-session)" "rename-session %1"

# ^ CTRL+b
bind C-b confirm-before -p "kill-session #S? (y/n)" kill-session

unbind &
bind & confirm-before -p "kill-window #W? (y/n)" kill-window

# ^ CTRL+x
unbind C-x
bind C-x confirm-before -p "kill-pane #P? (y/n)" kill-pane

# key bindings when the tmux opt "mode-keys" is set to emacs
# ^ CTRL+c
bind -Tcopy-mode C-c               send -X copy-pipe-and-cancel 'xsel -i -b'
# ???
bind -Tcopy-mode M-w               send -X copy-pipe-and-cancel 'xsel -i -b'
bind -Tcopy-mode MouseDragEnd1Pane send -X copy-pipe-and-cancel 'xsel -i -b'

# key bindings when the tmux opt "mode-keys" is set to vi
# ^ CTRL+j
#bind -Tcopy-mode-vi C-j               send -X copy-pipe-and-cancel 'xsel -i -b'
#bind -Tcopy-mode-vi Enter             send -X copy-pipe-and-cancel 'xsel -i -b'
#bind -Tcopy-mode-vi MouseDragEnd1Pane send -X copy-pipe-and-cancel 'xsel -i -b'

# key bindings when the tmux opt "mode-keys" is set to vi
bind -Tcopy-mode-vi 'v'           send -X begin-selection
bind -Tcopy-mode-vi 'y'           send -X copy-pipe-and-cancel 'xsel -i -b'

# These bindings are for X Windows only. If you're using a different
# window system you have to replace the `xsel` commands with something
# else. See https://github.com/tmux/tmux/wiki/Clipboard#available-tools
# [SOURCE](https://www.seanh.cc/2020/12/27/copy-and-paste-in-tmux/)
bind -Tcopy-mode          DoubleClick1Pane select-pane \; send -X select-word \; send -X copy-pipe-no-clear "xsel -i -b"
bind -Tcopy-mode-vi       DoubleClick1Pane select-pane \; send -X select-word \; send -X copy-pipe-no-clear "xsel -i -b"
bind -n DoubleClick1Pane  select-pane \; copy-mode -M \; send -X select-word \; send -X copy-pipe-no-clear "xsel -i -b"
bind -Tcopy-mode          TripleClick1Pane select-pane \; send -X select-line \; send -X copy-pipe-no-clear "xsel -i -b"
bind -Tcopy-mode-vi       TripleClick1Pane select-pane \; send -X select-line \; send -X copy-pipe-no-clear "xsel -i -b"
bind -n TripleClick1Pane  select-pane \; copy-mode -M \; send -X select-line \; send -X copy-pipe-no-clear "xsel -i -b"
bind -n MouseDown2Pane    run "tmux set-buffer -b primary_selection \"$(xsel -b -o)\"; tmux paste-buffer -b primary_selection; tmux delete-buffer -b primary_selection"

#unbind M-w
#bind M-w command-prompt -I "(move-window -s source-window),(move-window -t target-window)" "move-window -s %1 -t %2"

unbind v
bind v run "tmux set-buffer \"$(xsel --clipboard --output)\"; tmux paste-buffer"

#unbind u
#bind u capture-pane \; run "tmux paste-buffer | urlview"

unbind k
bind k run "tmux clear-history"

# FIXME(JEFF): tmux appears to not call this binding? I must enter command
# mode and issue this request directly before I am able to test out a new
# configuration w/o shutting down the tmux server.
#unbind r
#bind r run "tmux display-message \"Reloading configuration\" \"; run "tmux source-file /home/jeff/.tmux.conf" \; run "tmux refresh-client" \; run "source ~/.bash_profile"

# IMPORTANT(jeff): Unbind the list of key bindings so that it prevents me
# from fat fingering the wrong key and seeing everything go up in smoke! ^_^
#
# 1. https://gist.githubusercontent.com/mzmonsour/8791835/raw/0a9f8ed7c3bfafba153117ad317284cf4bae4678/tmux-default-bindings.txt
unbind q
#bind q kill-pane
unbind d
# Detach tagged clients
unbind D
# Detach and HUP selected clients
#unbind x
# detach and HUP tagged clients
unbind X
# suspend selected clients
unbind z
# suspend tagged clients
unbind Z

unbind %
unbind '"'
# tmux command prompt
unbind :
# default rename-session key
unbind $
unbind ,

set -g status-bg green
set -g status-fg black
set -g status-left "#[fg=green(echo $COLUMNS)]#S"
set -g status-right "#[fg=green]#H"
#set -g status-right 'Continuum status: #{continuum_status}'

set -g display-time 4000
set -g visual-activity on
set -g default-shell /bin/bash

set -g destroy-unattached off
set -g detach-on-destroy off
set -g exit-unattached off

#set -w -g window-status-current-bg red
set -w -g automatic-rename on
set -w -g monitor-activity on

set -w -g xterm-keys on
set -w -g clock-mode-style 24
set -w -g clock-mode-colour red

set -g mouse on

set -g history-limit 65536
set -g base-index 1
set -g set-titles on
set -g set-titles-string "[tmux]#S"

# fix vim escape delay
set -s escape-time 0

# Use the largest attached client rather than the smallest when attaching to a
# session; if you see dots, this is tmux showing us the size of the window that
# it can display.
#
# https://github.com/tmux/tmux/wiki/FAQ#why-do-i-see-dots-around-a-session-when-i-attach-to-it
set -g window-size largest

#setw -g mode-keys vi
setw -g mode-keys emacs

# IMPORTANT(JEFF): This implies that only tmux can set the clipboard; this is
# the default (secure)
setw -g set-clipboard external

# IMPORTANT(JEFF): This implies that any application running inside tmux can
# create a tmux paste buffer.
#setw -g set-clipboard on

# IMPORTANT(JEFF): This should only be set when the terminal we are using
# does not support OSC 52 escape sequence. VTE terminals -- Gnome Terminal,
# XFCE Terminal, Terminator do not support the escape sequences.
#
# Sadly, the one terminal where we might find ourselves in -- rxvt-unicode --
# does not support OSC 52 natively without an unofficial Perl extension [1].
#
# 1. http://anti.teamidiot.de/static/nei/*/Code/urxvt/
#setw -g set-clipboard off

set -g @plugin 'tmux-plugins/tpm'

# IMPORTANT(JEFF): This plugin is required for proper cross-platform setup
# of our shell inside of Mac OSX.
#
# https://github.com/tmux-plugins/tmux-sensible
#
# Fix pbcopy/pbpaste for old tmux versions (pre tmux v2.6)
#set -g default-command "reattach-to-user-namespace -l $SHELL"
set -g @plugin 'tmux-plugins/tmux-sensible'

# NOTE(JEFF): copy and paste aids
set -g @plugin 'tmux-plugins/tmux-yank'

# NOTE(JEFF): Workspace sessions
# https://github.com/tmuxinator/tmuxinator
#set -g @plugin 'tmuxinator/tmuxinator'

# NOTE(JEFF): Add nifty search functionality
#
# 1. https://github.com/tmux-plugins/tmux-copycat
set -g @plugin 'tmux-plugins/tmux-copycat'

# NOTE(JEFF): ...
set -g @plugin 'tmux-plugins/tmux-open'

# NOTE(JEFF): Automatic session management
set -g @plugin 'tmux-plugins/tmux-resurrect'
set -g @plugin 'tmux-plugins/tmux-continuum'

# tmux plugin opts

set -g @resurrect-processes 'http-server mosh node python sqlite3 ssh'
set -g @resurrect-capture-pane-contents 'on'
set -g @continuum-boot 'on'
set -g @continuum-restore 'on'

# NOTE(JEFF): tmux-open opts
set -g @open-S 'https://www.google.com/search?q='
# ^ CTRL+o
set -g @open-editor 'C-o'

# NOTE(JEFF): tmux-yank opts
#set -g @yank-selection 'clipboard'
#set -g @yank_selection_mouse 'clipboard'
# NOTE(JEFF): Wayland environment
#set -g @custom_copy_command 'wl-copy'
#set -g @yank_action 'copy-pipe-no-clear'

## tmux-copycat plugin opts

### predefined hotkeys
# prefix + ctrl-f - simple file search
# prefix + ctrl-g - jumping over git status files (best used after git status command)
# prefix + alt-h - jumping over SHA-1/SHA-256 hashes (best used after git log command)
# prefix + ctrl-u - url search (http, ftp and git urls)
# prefix + ctrl-d - number search (mnemonic d, as digit)
# prefix + alt-i - ip address search

### copycat mode bindings
# n - jumps to the next match
# N - jumps to the previous match

### copy highlighted match bindings
# Enter - if you're using Tmux vi mode
# ctrl-w or alt-w - if you're using Tmux emacs mode

# NOTE(JEFF): This is my first tmux "plugin" :-P
run "$HOME/.tmux/ssh.tmux"

# TODO(JEFF): When we find some time, I would love to get this snippet script I found
# up and going; there is a hint of remote copy and paste functionality! :-)
#run "$HOME/.tmux/yank.tmux"

# tmux plugins management
#
# tmux plugin manager bootstraps these plugins for us!
#
# 1. https://github.com/tmux-plugins/tpm/blob/master/docs/automatic_tpm_installation.md
if "test ! -d ~/.tmux/plugins/tpm" \
  "run 'git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm && ~/.tmux/plugins/tpm/bin/install_plugins'"

# IMPORTANT(JEFF): This should **always** be kept at the very bottom of our tmux configuration!
run "$HOME/.tmux/plugins/tpm/tpm"
